generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String       @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  reflections   Reflection[]
  images        Image[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum PublicationStatus {
  DRAFT
  PUBLISHED
}

model Reflection {
  id          String            @id
  title       String
  content     String            @db.Text
  publishDate DateTime?
  slug        String            @unique
  status      PublicationStatus @default(DRAFT)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  authorId        String
  author          User            @relation(fields: [authorId], references: [id])
  featuredImageId String?
  featuredImage   Image?          @relation("FeaturedImage", fields: [featuredImageId], references: [id])
  tags            ReflectionTag[]

  @@map("reflections")
}

model Tag {
  id        String   @id
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  reflections ReflectionTag[]

  @@map("tags")
}

model ReflectionTag {
  reflectionId String
  reflection   Reflection @relation(fields: [reflectionId], references: [id], onDelete: Cascade)
  tagId        String
  tag          Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade)
  assignedAt   DateTime   @default(now())

  @@id([reflectionId, tagId])
  @@map("reflection_tags")
}

model Image {
  id        String   @id
  url       String
  alt       String?
  caption   String?
  width     Int?
  height    Int?
  size      Int? // File size in bytes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  uploadedById String
  uploadedBy   User           @relation(fields: [uploadedById], references: [id])
  featuredIn   Reflection[]   @relation("FeaturedImage")
  galleries    GalleryImage[]

  @@map("images")
}

model Gallery {
  id          String   @id
  title       String
  description String?  @db.Text
  slug        String   @unique
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  images GalleryImage[]

  @@map("galleries")
}

model GalleryImage {
  galleryId String
  gallery   Gallery  @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  imageId   String
  image     Image    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  order     Int // For ordering images in the gallery
  addedAt   DateTime @default(now())

  @@id([galleryId, imageId])
  @@map("gallery_images")
}

model ContactSubmission {
  id        String   @id
  name      String
  email     String
  phone     String?
  subject   String?
  message   String   @db.Text
  status    String   @default("NEW") // NEW, REVIEWED, ARCHIVED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_submissions")
}
